##############################################################################
# Medical Image Registration ToolKit (MIRTK)
#
# Copyright 2016 Imperial College London
# Copyright 2016 Andreas Schuh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################

"""
This module can be used to execute the MIRTK command-line tools from an image
processing pipeline script. Its main usage is identical to the actual subprocess
module which is used internally by this mirtk.subprocess module.
"""

from __future__ import absolute_import, unicode_literals

import os
import sys
import shlex
import traceback
import subprocess

from collections import OrderedDict

# ============================================================================
# configuration
# ============================================================================

__dir__ = os.path.dirname(os.path.realpath(__file__))

config      = '@__CONFIG__@'
libexec_dir = os.path.realpath(os.path.join(__dir__, '@LIBEXEC_DIR@'))

if sys.platform.startswith('win'): libexec_ext = ['.exe', '.cmd', '.bat']
else:                              libexec_ext = ['']

# ============================================================================
# command execution
# ============================================================================

# ----------------------------------------------------------------------------
def path(argv, quiet=False):
    """Get full path of MIRTK command executable."""
    if isinstance(argv, list): command = argv[0]
    else:                      command = argv
    if   command == 'calculate':          command = 'calculate-element-wise'
    elif command == 'convert-dof2csv':    command = 'convert-dof'
    elif command == 'convert-dof2velo':   command = 'convert-dof'
    elif command == 'concatenate-dofs':   command = 'compose-dofs'
    elif command == 'concatenate-images': command = 'combine-images'
    elif command == 'remesh':             command = 'remesh-surface'
    fpath = None
    for ext in libexec_ext:
        p = os.path.join(libexec_dir, config, command + ext)
        if os.path.isfile(p):
            fpath = p
            break
    if not fpath:
        for ext in libexec_ext:
            p = os.path.join(libexec_dir, command + ext)
            if os.path.isfile(p):
                fpath = p
                break
    if not quiet:
        if not fpath:
            sys.stderr.write('Error: Missing execuable for command: ' + command)
        elif not os.access(fpath, os.X_OK):
            sys.stderr.write('Error: Insufficient permissions to execute command: ' + fpath)
    return fpath


# ----------------------------------------------------------------------------
def flatten(arg):
    """Given an argument, possibly a list nested to any level, return a flat list."""
    if isinstance(arg, (tuple, list)):
        lis = []
        for item in arg:
            lis.extend(flatten(item))
        return lis
    else:
        return [arg]


# ----------------------------------------------------------------------------
def quote(argv):
    """Return quoted command arguments."""
    args = []
    for arg in argv:
        arg = str(arg)
        if ' ' in arg:
            arg = '"' + arg + '"'
        args.append(arg)
    return args


# ----------------------------------------------------------------------------
def _call(argv, verbose=0, execfunc=subprocess.call):
    """Execute MIRTK command."""
    if not isinstance(argv, list):
        argv = shlex.split(argv)
    argv = [str(arg) for arg in argv]
    if argv[0] == 'convert-dof2csv':
        new_argv = ['convert-dof']
        out_fmt  = 'star_ccm_table'
        for arg in argv[1:]:
            if arg == '-pos': out_fmt = 'star_ccm_table_xyz'
            else: new_argv.append(arg)
        new_argv.extend(['-output-format', out_fmt])
        argv = new_argv
    argv[0] = path(argv[0])
    if not argv[0]: return 1
    if verbose > 0:
        sys.stdout.write("> ")
        sys.stdout.write(" ".join(quote(argv)))
        sys.stdout.write("\n\n")
    sys.stdout.flush()
    return execfunc(argv)


# ----------------------------------------------------------------------------
def call(argv, verbose=0):
    """Execute MIRTK command and return exit code."""
    return _call(argv, verbose=verbose, execfunc=subprocess.call)


# ----------------------------------------------------------------------------
def check_call(argv, verbose=0):
    """Execute MIRTK command and throw exception on error."""
    _call(argv, verbose=verbose, execfunc=subprocess.check_call)


# ----------------------------------------------------------------------------
def check_output(argv, verbose=0, code='utf-8'):
    """Execute MIRTK command and return its output."""
    output = _call(argv, verbose=verbose, execfunc=subprocess.check_output)
    if code: output = output.decode(code)
    return output


# ----------------------------------------------------------------------------
def run(cmd, args=[], opts={}, verbose=0, threads=0, exit_on_error=False):
    """Execute MIRTK command and throw exception or exit on error.

    This convenience wrapper for check_call throws a subprocess.CalledProcessError 
    when the command returned a non-zero exit code when exit_on_error=False.
    If exit_on_error=True, a the command arguments, the exit code, and the
    Python stack trace are printed to sys.stderr and this process terminated
    using sys.exit with the return code of the executed command.

    """
    argv = [cmd]
    argv.extend(args)
    if threads > 0:
        argv.extend(['-threads', str(threads)])
    # ordered list of options
    if isinstance(opts, list):
        for item in opts:
            if isinstance(item, (tuple, list)):
                opt = item[0]
                arg = flatten(item[1:])
            else:
                opt = item
                arg = None
            if not opt.startswith('-'):
                opt = '-' + opt
            argv.append(opt)
            if not arg is None:
                argv.extend(flatten(arg))
    # unordered dict of options
    else:
        for opt, arg in opts.items():
            if not opt.startswith('-'):
                opt = '-' + opt
            argv.append(opt)
            if not arg is None:
                argv.extend(flatten(arg))
    try:
        check_call(argv, verbose=verbose)
    except subprocess.CalledProcessError as e:
        if exit_on_error:
            sys.stdout.flush()
            sys.stderr.write("\n")
            sys.stderr.write("Command: ")
            sys.stderr.write(" ".join(quote(argv)))
            sys.stderr.write("\n")
            sys.stderr.write("\nError: Command returned non-zero exit status {}\n".format(e.returncode))
            sys.stderr.write("\nTraceback (most recent call last):\n")
            traceback.print_stack()
            sys.exit(e.returncode)
        raise e
