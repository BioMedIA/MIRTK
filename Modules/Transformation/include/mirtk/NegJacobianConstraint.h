/*
 * Medical Image Registration ToolKit (MIRTK)
 *
 * Copyright 2017 Imperial College London
 * Copyright 2017 Andreas Schuh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef MIRTK_NegJacobianConstraint_H
#define MIRTK_NegJacobianConstraint_H

#include "mirtk/TopologyPreservationConstraint.h"


namespace mirtk {


/**
 * Penalize small and negative Jacobian determinant values of parameterization
 *
 * This constraint prevents folding of the transformation parameterization,
 * i.e., either of the control point displacements or velocities. It preserves
 * topology in case of a classic FFD model and is in this case identical to
 * the TopologyPreservationConstraint. For the SVFFD model, it penalizes
 * small and negative Jacobian determinant values of the velocity field,
 * not the displacement field generated by this stationary velocity field.
 */
class NegJacobianConstraint : public TopologyPreservationConstraint
{
  mirtkEnergyTermMacro(LogJacobianConstraint, EM_NegDetJac);

public:

  /// Constructor
  NegJacobianConstraint(const char * = "");

  /// Destructor
  virtual ~NegJacobianConstraint();

  /// Compute determinant and adjugate of Jacobian of parameterization
  virtual double Jacobian(const FreeFormTransformation *ffd,
                          double x, double y, double z, double t,
                          Matrix &adj) const
  {
    double det;
    ffd->FFDJacobianWorld(adj, x, y, z, t, t);
    adj.Adjugate(det);
    return det;
  }

};


} // namespace mirtk

#endif // MIRTK_NegJacobianConstraint_H
